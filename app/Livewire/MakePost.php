<?php

namespace App\Livewire;

use App\Models\Post;
use Carbon\Carbon;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;
use Livewire\Component;
use Livewire\Attributes\On;
use Livewire\WithFileUploads;
use App\Livewire\Posts as LivewirePost;
use App\Models\Comment;

class MakePost extends Component
{

    use WithFileUploads;
    public $form_file;
    public $post_caption;

    public function render()
    {
        return view('livewire.make-post');
    }

    public function post(){
        $rules = [];
        $rules['form_file'] = 'nullable|file|mimes:jpg,png,jpeg,webp|max:2048';
        if($this->post_caption == '' && $this->form_file == ""){
            $this->responseMsg('Validation Error', 'Please Provide Any Caption or Image to Post', 'warning');
            return;
        }
        if($this->post_caption == ''){
            $rules['form_file'] = 'required|file|mimes:jpg,png,jpeg,webp|max:2048';
        }else{
            $rules['post_caption'] = 'required';
        }
        $this->validate($rules);
        
        if($this->form_file != null){
            $image = $this->form_file;
            $fileName = "Anonymous_" . uniqid() . date('d-m-y_hh-mm-ii') .'.'. $this->form_file->getClientOriginalExtension();
            $destination = 'uploads/posts/'.$fileName;
            if(!File::put($destination, file_get_contents($image->getRealPath()))){
                $this->responseMsg('Opps!', 'Something Went Wrong, Please try again', 'error');
                return;
            }
        }
        $post = new Post();
        $post->caption = $this->post_caption;
        $post->file = $fileName ?? '';
        $post->date = Carbon::now();
        $post->save();

        $cmnt = new Comment();
        $cmnt->post_id = $post->id;
        $cmnt->comment = "Autogenerated comment for Post ".str_pad($post->id, 3, '0', STR_PAD_LEFT);
        $cmnt->date = Carbon::now();
        $cmnt->save();

        $this->cleanup();
        $this->dispatch('updateNotificationPost', [true]);
        $this->responseMsg('Posted', '', 'success');
        return;       
    }

    private function responseMsg($title, $msg, $icon){
        $this->dispatch('alert', ['title' => $title, 'message' => $msg, 'icon' => $icon]);
    }

    private function cleanup(){
        $this->form_file = "";
        $this->post_caption = "";
    }
}
